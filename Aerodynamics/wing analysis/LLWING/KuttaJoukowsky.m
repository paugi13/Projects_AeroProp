function [cl_local,force_coeff] = KuttaJoukowsky(N,c4nods,h,GAMMA,Ui,s_pan,Cm0_y,chord,CDP,ncases,wake_len,S,mac,ALPHA)

wi = zeros(3,1) ; panel_force = zeros(3,N) ;
cl_local = zeros(N,ncases) ; force_coeff = zeros(11,ncases) ;

for icase = 1:ncases % calculate loads for the diferent aoa
    
    wi = zeros(3,1) ; tot_force = zeros(3,1) ; tot_momen = zeros(3,1);
    
    for i = 1:N  % force generated by each bounded vortex
        
        xp = c4nods(:,i) ;  % bounded vortex's midpoint
        wi = 0.0 ;  % wake induced velocity at xp
        
        for j = 1:N  % calculates wake induced velocity
            
            xb = c4nods(:,j) + [0.0, -0.5*h, 0.0].' ;  % horseshoe vortex (planar wake)
            xc = c4nods(:,j) + [0.0, 0.5*h, 0.0].' ;
            xa = xb + [wake_len,0.,0.].';
            xd = xc + [wake_len,0.,0.].';
            
            u1 = vortxl(xa,xb,xp,GAMMA(j,icase)) ;  % first trailing vortex
            u3 = vortxl(xc,xd,xp,GAMMA(j,icase)) ;  % second trailing vortex
            
            wi = wi + u1 + u3 ;  % wake induced velocity at xp
            
        end
        
        v_i = wi + Ui(:,icase) ;  % adds the freestream velocity to obtain the total velocity at xp
        
        xb = c4nods(:,i) + [0.0, -0.5*h, 0.0].' ;  % bounded vortex's points
        xc = c4nods(:,i) + [0.0, 0.5*h, 0.0].' ;
        
        d_g = (xc-xb)*GAMMA(i,icase) ; % circulation vector (gamma is per unit lenght)
        
        panel_force(:,i) = cross(v_i,d_g) ;  % KJ theorem (assumes unit density and freestream velocity)
        
        tot_force(:) = tot_force(:) + panel_force(:,i) ; % sum up force contributions
        tot_momen(:) = tot_momen(:) + cross(c4nods(:,i),panel_force(:,i));  % moments about root LE
        
    end  % bounded vortices
    
    for i = 1:N  % sections' Cl  (assumes Cn aprox Cl)
        cl_local(i,icase) = 2.0*panel_force(3,i) / s_pan(i) ;
    end
    
    force_coeff(1:3,icase) = 2.*tot_force/S ;  % CFx,CFy,CFz (body axes)
    force_coeff(4:6,icase) = 2.*tot_momen/S/mac ;  % CMx,CMy,CMz (about wing root LE)
    
    aoa = ALPHA(icase) ;  % angle of attack (deg)
    
    force_coeff(7,icase)  = force_coeff(3,icase)*cosd(aoa)-force_coeff(1,icase)*sind(aoa)   ; % CL
    force_coeff(8,icase)  = force_coeff(2,icase) ; % CS
    force_coeff(9,icase)  = force_coeff(3,icase)*sind(aoa)+force_coeff(1,icase)*cosd(aoa) ; % CD_induced
    
    force_coeff(10,icase) = 0.0  ;  % profile drag CDp (if enabled, it is added below)
    
    tot_cm0p = 0.0  ;
    
    for i = 1:N  % profile Cm0's contribution
        
        tot_cm0p = tot_cm0p + Cm0_y(i)*chord(i)^2*h ;
        
    end
    
    force_coeff(5,icase) =  force_coeff(5,icase) + tot_cm0p / S / mac  ; % wing's profile CM0 (adds to CMy)
    
    if ( sum(CDP,'all')>0 ) % add profile drag (estimated from experimental sections' data)
        
        tot_cdp = 0.0 ;
        
        for i = 1:N
            
            ypos = abs(c4nods(2,i))*2. ;  % normalized span position
            
            cl_y = cl_local(i,icase)  ; % local lift
            
            cd0 = CDP(1,1) + (CDP(2,1)-CDP(1,1))*ypos ;  % linear interpolation
            ck1 = CDP(1,2) + (CDP(2,2)-CDP(1,2))*ypos ;
            ck2 = CDP(1,3) + (CDP(2,3)-CDP(1,3))*ypos ;
            
            tot_cdp = tot_cdp + ( cd0 + ck1*cl_y + ck2*cl_y^2 )*chord(i)*h ;
            
        end
        
        force_coeff(10,icase) =  tot_cdp / S  ; % wing's profile drag (adds to CDi)
        
    end
    
    force_coeff(11,icase) = force_coeff(9,icase) + force_coeff(10,icase) ; % total CD (induced+profile)
    
end  % aoa of analysis

end  % function